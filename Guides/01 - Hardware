What are we building here? We need a hardware platform that:
  - fully supports the Multi-VM strategy (or at the very least, doesn't get in the way) as a strong base for the Host-OS
  - once set up, the hardware is hardly ever touched (same for the Host-OS)
  - anything happening at the hardware + host-os is as automated as possible (set it and forget it)

A quick "building construction" analogy:
  - the hardware + host os is the "foundation" upon which the entire virtualization stategy is built
    - do it right, and you won't have problems that bring down some of the rooms, or possibly all of the house
  - virtualization sofware is like the electrical wiring (a subsystem) of this home
    - could be simple and clean wiring, and you just flip a switch for it to work (Workstation Pro, Virtualbox)
    - could be messy/complex wiring (Hyper-V), with pieces of it in every other system of your house (but it also works)
  - vm's are the "room(s)" that you use
    - some rooms you live in most hours of the day (productivity vm's)
    - some you work in for just an hour or so (occasional use, but still useful VM)
    - and some are like the attic/basement that you visit once or twice per year (kick the tires VM).

So, here's (multiple paths to get to) a good foundation:

01. A hardware platform (for the home market) with these *minimum* characteristics:
  - Intel i7 multi-core cpu (or AMD equivalent) or better
  - minimum 32gb of ram (or better, 64GB)
  - one or more SSD's (or NVMe's)
  - will have device driver support for (your choice of) a Host-OS
  - it could be a purchased desktop (DT) or laptop (LT)
  - easy these days to build yourself (DIY)
  - high-end graphics (gaming-class) card not necessary; the built-in graphics on most any purchased computer is fine
    if diy, the graphics built-in to the MOBO is fine
    special considerations if you DO want a high-end graphics (gaming-class) card, and want to share to all VM's
  01a. Intel platforms:
    - possibilities:
      - buy a dt/lt to the above specs ... shop around on amazon, best buy, or your local resources
      - buy a NUC (intel NUC, complete small form-factor), add 16GB ram & ssd ... ready for host-os
      - diy: Intel/other i7 motherboard w/ 4 slots for ram, i7 cpu, 4x8gb(or 16gb) dimms, one or more ssd's
        add a case, power supply, keyboard/monitor ... assemble ... ready for host-os
        the more modern the MOBO, the more capabilities it will have (more ram, more ssd slot support, etc.)
      - websites to help you build (google search for latest/current results, dozens of options)
        https://www.newegg.com/insider/building-a-gaming-pc-for-the-first-time-dont-panic-this-guide-can-help-you-out/
        note that these sites, while helpful in building a pc, assume you want a business-class pc, not a VM-capable pc
      - our own build process for a VM-capable DIY pc will be forth-coming
      - you can always specify your requirements, and have a custom pc built for you
  01b. AMD platform
  01c. ... others (that folks have done)?
  
02. planning for uses on that platform (helps you decide what platform elements to get)
  - will run a host-os (not the same as your "primary" os)
    - plan for your virtualization layer (most likely a Type-2, but could be otherwise)
    - guest additions (the tools added to each vm to make use of virtualized components of your platform)
  - will hold "local" data:
    - local data storage (shared out to all the vm's on the host-os)
    - local NAS (holds big stuff, backups, etc. ... whatever you can think of)
  - services:
    - lan
    - local NAS (synology, other)
    - internet (your home router, internet connection)
  - ensure everything:
    - "supports" virtualization (Intel/AMD virtualization extensions in the cpu) as best as possible
    - can be "virtualized" and presented to the vm's (i.e., ethernet card can be virtualized thru "guest additions")

Windows Folks:
- you might be thinking "windows gives me all kinds of grief", and I don't want that for a Host-OS
  - Windows is fine as a host-os, as long as we strip out all the grief-causing elements (this is very possible)
  - we make the os our own (versus Microsoft making it theirs, and allowing you to use it)
  - once the host-os is installed, we rarely touch it
- you might be thinking "windows is fine, and I love it", in which case
  - use Microsoft's own Type-1 Hyper-V built-in to Windows 10/11, and you are ready for the Multi-VM strategy
  - we don't get to make the os our own, so you'll be doing MS updates, etc., to the host-os ... generally, accepting all MS grief
 
 Linux folks:
 - buy/build a pc, install linux on it as the host-os, add a virtualization package ... done; start building your vm's
   - keep everything up-to-date with the host-os package manager
  

Feel free to add in or rework, as you see fit, if you have complementary solutions.



